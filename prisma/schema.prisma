generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  phoneNumber Int
  password    String
  email       String   @unique
  verified    Boolean  @default(false)
  role        Roles    @default(admin)
  gender      Gender   @default(male)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Product {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  price          Int
  originalPrice  Int?
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  barcode        String        @unique
  image          String
  categoryId     String        @db.ObjectId
  category       Category      @relation(fields: [categoryId], references: [id])
  brandIDs       String[]      @db.ObjectId
  brands         Brand[]       @relation(fields: [brandIDs], references: [id])
  subCategoryIDs String[]      @db.ObjectId
  subCategories  SubCategory[] @relation(fields: [subCategoryIDs], references: [id])
  extensions     Extension[]
  // sizes          Size[]
  colorShcemes   ColorShceme[]
}

model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  slug    String    @unique
  image   String?
  Product Product[]
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  Product    Product[] @relation(fields: [productIDs], references: [id])
  productIDs String[]  @db.ObjectId
  main       Boolean   @default(false)
  image      String?
  brandIds   String[]  @db.ObjectId
  brands     Brand[]   @relation(fields: [brandIds], references: [id])
}

model Brand {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  Product        Product[]     @relation(fields: [productIDs], references: [id])
  productIDs     String[]      @db.ObjectId
  image          String?
  subCategoryIDs String[]      @db.ObjectId
  subCategories  SubCategory[] @relation(fields: [subCategoryIDs], references: [id])
}

model Size {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  qty           Int          @default(0)
  title         String?
  ColorShceme   ColorShceme? @relation(fields: [colorShcemeId], references: [id], onDelete: Cascade)
  colorShcemeId String?      @db.ObjectId
}

model ColorShceme {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  color     String? @default("#000")
  name      String? @default("بلا")
  image     String?
  sizes     Size[]
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
}

model Extension {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  image     String?
  price     Int
  qty       Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?     @db.ObjectId
  totalPrice Int         @default(0)
  rest       Int         @default(0)
  orderItems OrderItem[]
  status     OrderStatus @default(pending)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  barcode    String      @unique
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String // ID of the product
  skuId       String // Stock Keeping Unit ID
  barcode     String // Barcode of the product
  qty         Int // Quantity of the item in the cart
  title       String // Title of the product
  image       String // URL of the product image
  skuImage    String? // Optional URL for SKU-specific image
  hashedColor String? // Optional hashed color code
  price       Float // Price of the item
  nameOfColor String? // Optional name of the color
  createdAt   DateTime @default(now()) // Timestamp for when the item was added to the cart
  updatedAt   DateTime @updatedAt
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String?  @db.ObjectId
}

enum OrderStatus {
  pending
  inProgress
  done
  rejected
  refused
}

enum UserStatus {
  pending
  active
  inactive
}

enum Roles {
  admin
  superAdmin
}

enum Gender {
  male
  female
}
